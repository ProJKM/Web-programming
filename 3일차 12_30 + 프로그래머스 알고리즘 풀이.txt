Function(함수) : 
함수 내부에서 return 구문이 실행될 경우, 해당 함수가 종료됩니다.
return되는 값을 지정해주지 않고 종료되는 함수의 경우에도 기본적으로 undefined가 반환되게 됩니다.

// Function Declaration (함수 선언식)
function foo () {
  // function body..
}

// Function Expression (함수 표현식)
const foo = function () {
  // function body..
};

////////////////////////////////////////////////////////////////////

// 함수 선언 (매개변수)
function add (x, y) {
  var result = x + y;
  console.log(result);
  return result;
}

// 함수 실행 (인자)
add(3, 5);

///////////////////////////////////////////////////////////////////

Arrays(배열) : 
어떠한 정보(값)들을 순서대로 저장할 수 있는 구조입니다. 

var arr = [ 1, '3', true ];
var arr1 = [ undefined, null, false, NaN, 1000 ];

배열의 길이

var fruits = [ 'apple', 'orange', 'grape' ];
console.log(fruits); // [ 'apple', 'orange', 'grape' ]
console.log(fruits.length); // 3

배열의 요소 접근

var food = [ 'pasta', 'steak', 'rice' ];
var myFavoriteFood = food[1];
console.log(myFavoriteFood); // 'steak'

배열에 요소 추가하기

var arr = [];
arr[0] = true;
console.log(arr[0]); // true

arr[2] = true;
console.log(arr[2]); // true

console.log(arr); // [ true, undefined, true ]

//////////////////////////////////////////////////////////////////////

Object(객체) : 

var person1 = {
  name: "Ken Huh",
  age: 13,
  address: "서울특별시 강남구 삼성로 86길 20"
};

객체에 저장된 내용 가져오기

var myName = person1.name;
var myAge = person1.age;

console.log(myName); // "Ken Huh"
console.log(myAge); // 13

또는

var myName = person1["name"];
var myAge = person1["age"];

console.log(myName); // "Ken Huh"
console.log(myAge); // 13

객체에 새로운 key/value 추가하기, 수정하기

var person = {
  name: "Ken Huh"
};

console.log(person.name); // "Ken Huh"
console.log(person.age); // undefined (존재하지 않는 key/value)

// 추가
person.age = 13; // 혹은 person["age"] = 13;

console.log(person.age); // 13

객체 key/value 삭제하기

var person = {
  name: "Ken Huh",
  age: 13
};

console.log(person.name); // "Ken Huh"
console.log(person.age); // 13

// 삭제
delete person.age;

console.log(person.age); // undefined (더 이상 존재하지 않는 key/value)

객체 순회하기

const object = { a: 1, b: 2, c: 3 };

for (const property in object) {
  console.log(`${property}: ${object[property]}`);
}

// expected output:
// "a: 1"
// "b: 2"
// "c: 3"

Dot Notation, Bracket Notation

person.age = 36;

위에서는 객체 리터럴을 이용해 빈 객체를 생성해 준 뒤, Dot Notation을 통해 속성을 갱신해주었습니다. 
그러나, JavaScript에서 식별자로 허용되지 않는 문자가 들어간 속성 이름을 사용해야 하는 경우에는 반드시 Bracket notation을 사용해야 합니다

person['한국 나이'] = 36;

Method : 어떤 객체의 속성으로 접근해서 사용하는 함수를 method

Arrays and Functions : 배열과 함수 또한 일반 객체와 동일한 성질을 갖고 있습니다.

///////////////////////////////////////////////////////////////////

function foo (a) {
  return a + 3;
}

const arr = [ foo(1), foo(2), foo(3) ];

console.log(arr); // [4,5,6]

///////////////////////////////////////////////////////////////////////

프로그래머스 알고리즘 풀이

김서방 찾기

function solution(seoul) {
    var x = seoul.indexOf("Kim")
    var answer = "김서방은 "+x+"에 있다";
    return answer;
}

가운데글자 가져오기

function solution(s) {
    var x = s.length, y=x/2
    if (x%2===0)
        {           
           var answer = s[y-1]+s[y]
}
    else {
        var answer = s[y-0.5]
    }
    return answer;
}

수박수박수박수

function solution(n) {
    var x = "수박".repeat(5000);
    var answer = x.slice(0, n);
    return answer;
}
