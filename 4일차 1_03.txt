Document Object Model (DOM) : DOM이란 HTML 문서를 위한 프로그래밍 인터페이스

Selecting Elements

1. 아이디 이름을 이용하여 선택하는 방법

// special-button 아이디를 가진 요소를 선택하여 `$el` 변수에 대입
const $el = document.getElementById("special-button");

// special-button 아이디를 가진 요소의 텍스트 변경
$el.textContent = "I am a Special Button";

2. 클래스 이름을 이용하여 선택하는 방법

// item 클래스를 가진 "모든 요소들"을 선택하여 `$listItems` 변수에 대입
const $listItems = document.getElementsByClassName("item");

// container 클래스를 가진 "모든 요소들"을 선택하여 `$container` 변수에 대입
const $container = document.getElementsByClassName("container");

// getElementsByClassName의 결과값은 배열과 유사한 형태이므로 인덱스로 접근하여 사용한다.
$listItems[0].textContent = "List 1";
$listItems[1].textContent = "List 2";
$listItems[2].textContent = "List 3";

// HTML 상에서 해당 클래스를 가진 요소가 단 하나 뿐이더라도,
// getElementsByClassName의 결과값은 배열과 유사한 형태이므로 인덱스로 접근하여 사용한다.
$container[0].style.backgroundColor = "green";

3. 태그 이름을 이용하여 선택하는 방법

// li 태그를 이용한 "모든 요소들"을 선택하여 `$listItems` 변수에 대입
const $listItems = document.getElementsByTagName("li");

// p 태그를 이용한 "모든 요소들"을 선택하여 `$paragraphs` 변수에 대입
const $paragraphs = document.getElementsByTagName("p");

// getElementsByTagName의 결과값은 배열과 유사한 형태이므로 인덱스로 접근하여 사용한다.
$listItems[0].textContent = "List 1";
$listItems[1].textContent = "List 2";
$listItems[2].textContent = "List 3";

// 위치와 상관없이 모든 p 태그를 선택하게 되므로 $paragraphs에는 총 4개의 요소가 선택되고,
// 그 중 첫번째 요소의 배경 색깔을 수정합니다.
$paragraphs[0].style.backgroundColor = "green";

4. CSS 선택자를 이용하여 선택하는 방법

// CSS 선택자 문법을 이용하여 container라는 클래스 이름을 가진 요소를 선택합니다.
// querySelector라는 함수는 모든 경우에 "하나의 요소"를 반환합니다.
const $container = document.querySelector(".container");

const $button = document.querySelector("#special-button");

// 주어진 CSS 선택자와 일치하는 요소가 여러 개일 경우,
// querySelector 함수는 가장 첫번째 요소를 반환합니다.
const $listItem = document.querySelector(".item");

// querySelectorAll 함수는 주어진 CSS 선택자와 일치하는 "모든 요소들"을 유사 배열의 형태로 반환합니다.
// (요소를 제어하고 싶다면 인덱스 위치를 사용해야 합니다.)
const $paragraphs = document.querySelectorAll("p");

자주 사용할 만한 속성들

Element.children - 자식 요소 가져오기
Element.classList - 요소의 클래스 정보
Element.innerHTML - 요소의 HTML
Element.style - 요소의 CSS 스타일
Element.remove - 요소 삭제하기
Element.appendChild - 자식 요소 추가하기

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Example1

const something = document.createElement("p");

for (let i = 0; i < 5; i++) {
  something.textContent = i;
  document.body.appendChild(something);
}

Example2

for (let i = 0; i < 5; i++) {
  const something = document.createElement("p");
  something.textContent = i;
  document.body.appendChild(something);
}

// Example1 의 경우 Elemet선언후 해당 "p"값을 수정 0 >> 4
// Example2 의 경우 Elemet 0~4 까지 순서대로 "body" 끝에 나열

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Events : "이벤트"란, 웹 상에서 발생하는 사건들을 통칭하는 단어

이벤트 목록
https://developer.mozilla.org/ko/docs/Web/Events





