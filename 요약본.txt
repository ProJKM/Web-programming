1일차 ////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////////////

// HTML을 구성하는 기본 단위는 태그 <태그>
<br> 띄어쓰기
<h1> 문구 강조
<p> 단락
<img src="이미지 주소">
<a href="https://www.vanillacoding.co">바닐라코딩 홈페이지</a>



// VAR 가능
// LET 재선언 불가, 재할당 가능
// CONST 재선언, 재할당 불가

// CLASS
<span class="thick">I'm thick</span>

.thick {
  font-weight: bold;
}

// ID
<div id="box">I'm a box</div>

#box {
  background: blue;
}

// Descendent 하위요소 선택할때
<ul id="nav">
  <li>child</li>
</ul>

#nav li {
  background: blue;
}

// Child 직속하위요소만 선택할때
#list > li {
  border: 1px solid black;
}

// Universal 페이지 전체다 적용
* {
  color: orange;
}

// Attribute
img[alt="Cat"] {
  border: 1px solid black;
}

<img src="myimage.jpg" alt="Cat">
 


// 블럭요소
<p><div>
// 인라인 요소
<span>



// 포지셔닝
Using Flex
Using Inline Block
Using Position Property

2일차 ////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////////////

Machine Language (001011110) : Machine Language는 컴퓨터가 이해할 수 있는 유일한 언어입니다.
Assembly Language (Low-level Language) :  Machine Language의 내용들을 사람이 읽고 이해할 수 있는 방식으로 거의 동일하게 작업할 수 있습니다.
High-level Language : Interpreted Language는 편지를 가져가서 한 문장, 한 문장 읽으면서 동시에 번역하는 상황과 유사합니다. 
                            Compiled Language는 사전에 번역해놓은 편지를 친구에게 전달해주는 것과 유사합니다.
Command Line Interface(CLI) : 사용자들은 터미널이나 콘솔창을 통해 명령어를 입력하게 됩니다.
Graphical User Interface(GUI) : GUI는 사용자가 창이나 스크롤, 버튼, 이미지, 아이콘 등을 이용하여 시스템을 조종할 수 있도록 도와줍니다.

한 줄로 코멘트를 작성할 때는 //를 이용할 수 있습니다.
/*와 */를 이용하여 코멘트를 여러 줄 작성할 수도 있습니다.



JavaScript

variables : 자바스크립트에서 변수를 선언하는 방법에는 세 가지(var, let(재선언불가), const(재선언,재할당불가))가 있습니다.

Identifiers : 변수를 선언할때 지어주는 이름을 Identifier라고 부릅니다. 숫자, Reserved Words로 시작할 수는 없다.

Boolean : Boolean에는 true 혹은 false 단 두 가지의 값만 존재합니다. 

undefined : undefined라는 단어의 의미는 말 그대로, "정의되지 않음"이라는 뜻입니다.

null : null이라는 값은 undefined와는 다르게 의도적으로 값이 없음을 표현

Numbers : 숫자

String : 문자열



Logical NOT Operator : !를 이용해 표현합니다.
Logical OR Operator : ||로 표현합니다.
Logical AND Operator : &&로 표현합니다.
조건문 : if를 이용해 표현합니다.

3일차 ////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////////////

Function(함수) : 
함수 내부에서 return 구문이 실행될 경우, 해당 함수가 종료됩니다.
return되는 값을 지정해주지 않고 종료되는 함수의 경우에도 기본적으로 undefined가 반환되게 됩니다.

// Function Declaration (함수 선언식)
function foo () {
  // function body..
}

// Function Expression (함수 표현식)
const foo = function () {
  // function body..
};

// 함수 선언 (매개변수)
function add (x, y) {
  var result = x + y;
  console.log(result);
  return result;
}

// 함수 실행 (인자)
add(3, 5);

Arrays(배열) : var arr = [ undefined, null, false, NaN, 1000 ];

배열의 길이 console.log(fruits.length); // 3
배열의 요소 접근 var myFavoriteFood = food[1];
배열에 요소 추가하기 arr[0] = true;

Object(객체) : 

var person1 = {
  name: "Ken Huh",
  age: 13,
  address: "서울특별시 강남구 삼성로 86길 20"
};

// 추가
person.age = 13; // 혹은 person["age"] = 13;
// 삭제
delete person.age;

Method : 어떤 객체의 속성으로 접근해서 사용하는 함수를 method

Arrays and Functions : 배열과 함수 또한 일반 객체와 동일한 성질을 갖고 있습니다.

function(함수) :

function foo (a) {
  return a + 3;
}

4일차 ////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////////////

Document Object Model (DOM) : DOM이란 HTML 문서를 위한 프로그래밍 인터페이스

Selecting Elements

1. 아이디 이름을 이용하여 선택하는 방법

// special-button 아이디를 가진 요소를 선택하여 `$el` 변수에 대입
const $el = document.getElementById("special-button");

// special-button 아이디를 가진 요소의 텍스트 변경
$el.textContent = "I am a Special Button";

2. 클래스 이름을 이용하여 선택하는 방법

// item 클래스를 가진 "모든 요소들"을 선택하여 `$listItems` 변수에 대입
const $listItems = document.getElementsByClassName("item");

// container 클래스를 가진 "모든 요소들"을 선택하여 `$container` 변수에 대입
const $container = document.getElementsByClassName("container");

// getElementsByClassName의 결과값은 배열과 유사한 형태이므로 인덱스로 접근하여 사용한다.
$listItems[0].textContent = "List 1";
$listItems[1].textContent = "List 2";
$listItems[2].textContent = "List 3";

// HTML 상에서 해당 클래스를 가진 요소가 단 하나 뿐이더라도,
// getElementsByClassName의 결과값은 배열과 유사한 형태이므로 인덱스로 접근하여 사용한다.
$container[0].style.backgroundColor = "green";

3. 태그 이름을 이용하여 선택하는 방법

// li 태그를 이용한 "모든 요소들"을 선택하여 `$listItems` 변수에 대입
const $listItems = document.getElementsByTagName("li");

// p 태그를 이용한 "모든 요소들"을 선택하여 `$paragraphs` 변수에 대입
const $paragraphs = document.getElementsByTagName("p");

// getElementsByTagName의 결과값은 배열과 유사한 형태이므로 인덱스로 접근하여 사용한다.
$listItems[0].textContent = "List 1";
$listItems[1].textContent = "List 2";
$listItems[2].textContent = "List 3";

// 위치와 상관없이 모든 p 태그를 선택하게 되므로 $paragraphs에는 총 4개의 요소가 선택되고,
// 그 중 첫번째 요소의 배경 색깔을 수정합니다.
$paragraphs[0].style.backgroundColor = "green";

4. CSS 선택자를 이용하여 선택하는 방법

// CSS 선택자 문법을 이용하여 container라는 클래스 이름을 가진 요소를 선택합니다.
// querySelector라는 함수는 모든 경우에 "하나의 요소"를 반환합니다.
const $container = document.querySelector(".container");

const $button = document.querySelector("#special-button");

// 주어진 CSS 선택자와 일치하는 요소가 여러 개일 경우,
// querySelector 함수는 가장 첫번째 요소를 반환합니다.
const $listItem = document.querySelector(".item");

// querySelectorAll 함수는 주어진 CSS 선택자와 일치하는 "모든 요소들"을 유사 배열의 형태로 반환합니다.
// (요소를 제어하고 싶다면 인덱스 위치를 사용해야 합니다.)
const $paragraphs = document.querySelectorAll("p");

자주 사용할 만한 속성들

Element.children - 자식 요소 가져오기
Element.classList - 요소의 클래스 정보
Element.innerHTML - 요소의 HTML
Element.style - 요소의 CSS 스타일
Element.remove - 요소 삭제하기
Element.appendChild - 자식 요소 추가하기

5일차 ////////////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////////////

// Scope란, 우리가 작성하는 코드의 접근 범위를 결정하는 개념입니다.

// Scope 계층에서 가장 중요한 특징은 상위에서 하위 Scope 내부 정보를 접근 불가능, 하위에서 상위 Scope의 정보는 접근 가능

// 모든 변수 선언문은 스코프 내에서 최상위로 Hoisting 됩니다.

// 함수선언식은 항상 최상위 호이스팅 

function j () {
  console.log('j');
}



아래 자료형들은 Primitive에 해당합니다. (단일정보)
String
Boolean
Number
Null
Undefined
Symbol

Reference(참조) 방식으로 작동하는 자료형은 단 하나 뿐입니다.
Object
Array와 Function도 포함
